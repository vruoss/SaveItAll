var N=Object.defineProperty;var m=a=>{throw TypeError(a)};var h=(a,e,t)=>e in a?N(a,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[e]=t;var d=(a,e,t)=>h(a,typeof e!="symbol"?e+"":e,t),F=(a,e,t)=>e.has(a)||m("Cannot "+t);var n=(a,e,t)=>(F(a,e,"read from private field"),t?t.call(a):e.get(a)),u=(a,e,t)=>e.has(a)?m("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(a):e.set(a,t);var s;const i=class i{constructor(){u(this,s,new Map)}static getInstance(){return i.instance||(i.instance=new i),i.instance}updateFieldName(e,t){n(this,s).set(e,t)}getFieldName(e){return n(this,s).get(e)}updateFields(e){return e.map(t=>{const c=this.getFieldName(t.id);return c?{...t,name:c}:(this.updateFieldName(t.id,t.name),t)})}clearFieldNames(){n(this,s).clear()}initializeFromFields(e){e.forEach(t=>{this.getFieldName(t.id)||this.updateFieldName(t.id,t.name)})}getFieldNameEntries(){return Array.from(n(this,s).entries())}};s=new WeakMap,d(i,"instance");let r=i;const o=r.getInstance();export{o as f};
